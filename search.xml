<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Redis的bitmap在亿级数据流中的应用]]></title>
    <url>%2F2019%2F10%2F24%2Fredis-bitmap%2F</url>
    <content type="text"><![CDATA[前言123之前采用redis hash数据结构存放数据，在并发每秒3k的时候，10分钟过后 数据量就已经3个G了。所以不采用这数据结构来存放数据思考良久。最后选择 redis bitmap来存放数据 目录123456781.bitmap的原理、用法。2.bitmap的优势、限制。3.bitmap空间、时间粗略计算方式。4.bitmap的使用场景。 bitmap 原理/用法12345678910118bit = 1b = 0.001kbbitmap就是通过最小的单位bit来进行0或者1的设置表示某个元素对应的值或者状态。一个bit的值，或者是0，或者是1；也就是说一个bit能存储的最多信息是2。进入redis安装目录。设置path环境变量之后redis-cli 进入 命令行客户端setbit key offset value key 就是rediskeyoffect 偏移量value 0或者1 bitmap的优势、限制123456789优势：1 基于最小的bit单位来存放数据，非常省空间哈2 设置时候时间复杂度O(1)、读取时候时间复杂度O(n)，操作是非常快的。3 二进制数据的存储，进行相关计算的时候非常快。4 扩容方便限制：redis中bit映射被限制在512MB之内，所以最大是2^32位。建议每个key的位数都控制下，因为读取时候时间复杂度O(n)，越大的串读的时间花销越多。 bitmap的优势、限制1234offset为2^32-1（分配512MB）需要～300ms，offset为2^30-1(分配128MB)需要～80ms，offset为2^28-1（分配32MB）需要～30ms，offset为2^26-1（分配8MB）需要8ms大概的空间占用计算公式是：($offset/8/1024/1024)MB bitmap的使用场景12341，比如说业务的幂等性操作2，统计用户在线人数/活跃数3. 用户分配权限4 。---------很多 bitmap的使用场景]]></content>
  </entry>
  <entry>
    <title><![CDATA[elk springboot 集成]]></title>
    <url>%2F2019%2F10%2F17%2Felk-2%2F</url>
    <content type="text"><![CDATA[最基本的springboot的环境搭建我就不说了1234567添加pom.xml &lt;dependency&gt; &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt; &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt; &lt;version&gt;5.3&lt;/version&gt; &lt;/dependency&gt; 添加 logback-spring.xml1234567891011121314151617181920&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration&gt;&lt;configuration&gt; &lt;appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;localhost:4560&lt;/destination&gt; &lt;!--&lt;encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder" /&gt;--&gt; &lt;encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder" &gt; &lt;customFields&gt;&#123;"appName":"springboot_logstash"&#125;&lt;/customFields&gt; customFields appName ：表示索引名称 &lt;/encoder&gt; &lt;/appender&gt; &lt;include resource="org/springframework/boot/logging/logback/base.xml"/&gt; &lt;root level="INFO"&gt; &lt;appender-ref ref="LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/root&gt;&lt;/configuration&gt; 项目中如何使用123456789Logger logger = LoggerFactory.getLogger(SpringbootLogstashApplication.class); @GetMapping("test") public void test()&#123; for (int i = 0; i &lt; 10; i++) &#123;// logger.error("something wrong. id=&#123;&#125;; name=Ryan-&#123;&#125;;", i, i); logger.error("something wrong. id=&#123;&#125;; name=Ryan-&#123;&#125;;", i, i); logger.info("入参 ：;", UUID.randomUUID(), i); &#125; 没有图片，哈哈，自己慢慢入坑]]></content>
  </entry>
  <entry>
    <title><![CDATA[elk环境搭建]]></title>
    <url>%2F2019%2F10%2F17%2Felk-1%2F</url>
    <content type="text"><![CDATA[docker安装就行 我这边做简单安装，生产环境不要学我，安装不是重点123456789101112131415161718192021222324252627282930313233343536373839404142 docker pull elasticsearch docker pull kibana下载docker镜像docker pul docker.elastic.co/logstash/logstash:6.5.4创建文件夹 (用于容器文件的挂载)mkdir /usr/local/logstash/configlogstash.yml (空文件就行)log4j2.propertieslogger.elasticsearchoutput.name = logstash.outputs.elasticsearchlogger.elasticsearchoutput.level = debugpipelines.yml(那个小杠杠很重要)- pipeline.id: my-logstash path.config: "/usr/share/logstash/config/*.conf" pipeline.workers: 3logstash-es-springboot.conf 文件input &#123; tcp &#123; port =&gt; 4560 codec =&gt; json_lines &#125;&#125;output&#123; elasticsearch &#123; hosts =&gt; ["localhost:9200"] index =&gt; "%&#123;[appName]&#125;-%&#123;+YYYY.MM.dd&#125;" #用一个项目名称来做索引 &#125; stdout &#123; codec =&gt; rubydebug &#125;&#125;docker run -d -p 5044:5044 -p 9600:9600 -it -v /usr/local/logstash/config/:/usr/share/logstash/config/ docker.elastic.co/logstash/logstash:6.5.4]]></content>
  </entry>
  <entry>
    <title><![CDATA[记录docker springcloud 环境传递profiles 参数]]></title>
    <url>%2F2019%2F10%2F06%2Fdocker-1%2F</url>
    <content type="text"><![CDATA[发泄一下1它娘的，非常气氛，弄了快两个小时 fuck Dockerfile12345678FROM java:8MAINTAINER awesomeADD target/xxl-job-admin-*.jar /app.jarENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","-Dspring.profiles.active=$&#123;SPRING_PROFILES_ACTIVE&#125;","/app.jar"] 正确的启动方式1docker run -d -p 8080:8080 -e SPRING_PROFILES_ACTIVE="dev" -v /tmp:/data/applogs 012a2747a478]]></content>
  </entry>
  <entry>
    <title><![CDATA[ribbon 基于CAS实现轮循算法（也适用于分布式环境）]]></title>
    <url>%2F2019%2F09%2F08%2Fround-arithmetic%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940package com.awesome.arithmetic;import java.util.concurrent.atomic.AtomicInteger;/** * 轮训算法 * * @author awesome */public class RoundArithmetic &#123; public static AtomicInteger rounder=new AtomicInteger(0); public static void main(String[] args) &#123; System.out.println(roundArithmetic(3)); System.out.println(roundArithmetic(3)); System.out.println(roundArithmetic(3)); System.out.println(roundArithmetic(3)); System.out.println(roundArithmetic(3)); System.out.println(roundArithmetic(3)); System.out.println(roundArithmetic(3)); &#125; /** * 负载均衡轮循算法 * @param modulo * @return */ public static int roundArithmetic(Integer modulo)&#123; int current=rounder.get(); //第一次默认为0 int next=(current+1)%modulo; if (rounder.compareAndSet(current,next))&#123; return current; &#125; return current; &#125;&#125; 输出1234567891011/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/bin/java "-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=60238:/Applications/IntelliJ IDEA.app/Contents/bin" -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/lib/tools.jar:/Users/awesome/Documents/souce/zuul/cheer-source/ribbon-test-service-peer2/target/test-classes:/Users/awesome/Documents/souce/zuul/cheer-source/ribbon-test-service-peer2/target/classes:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-starter-netflix-eureka-client/2.0.0.RELEASE/spring-cloud-starter-netflix-eureka-client-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-starter/2.0.0.RELEASE/spring-cloud-starter-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-context/2.0.0.RELEASE/spring-cloud-context-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/security/spring-security-crypto/5.0.4.RELEASE/spring-security-crypto-5.0.4.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-commons/2.0.0.RELEASE/spring-cloud-commons-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/security/spring-security-rsa/1.0.5.RELEASE/spring-security-rsa-1.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.56/bcpkix-jdk15on-1.56.jar:/Users/awesome/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56/bcprov-jdk15on-1.56.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-netflix-core/2.0.0.RELEASE/spring-cloud-netflix-core-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.0.1.RELEASE/spring-boot-autoconfigure-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot-starter-aop/2.0.1.RELEASE/spring-boot-starter-aop-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/org/aspectj/aspectjweaver/1.8.13/aspectjweaver-1.8.13.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-netflix-eureka-client/2.0.0.RELEASE/spring-cloud-netflix-eureka-client-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/com/netflix/eureka/eureka-client/1.9.2/eureka-client-1.9.2.jar:/Users/awesome/.m2/repository/org/codehaus/jettison/jettison/1.3.7/jettison-1.3.7.jar:/Users/awesome/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar:/Users/awesome/.m2/repository/com/netflix/netflix-commons/netflix-eventbus/0.3.0/netflix-eventbus-0.3.0.jar:/Users/awesome/.m2/repository/com/netflix/netflix-commons/netflix-infix/0.3.0/netflix-infix-0.3.0.jar:/Users/awesome/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar:/Users/awesome/.m2/repository/joda-time/joda-time/2.9.9/joda-time-2.9.9.jar:/Users/awesome/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar:/Users/awesome/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar:/Users/awesome/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/awesome/.m2/repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar:/Users/awesome/.m2/repository/org/apache/commons/commons-math/2.2/commons-math-2.2.jar:/Users/awesome/.m2/repository/com/netflix/archaius/archaius-core/0.7.6/archaius-core-0.7.6.jar:/Users/awesome/.m2/repository/com/google/guava/guava/16.0/guava-16.0.jar:/Users/awesome/.m2/repository/javax/ws/rs/jsr311-api/1.1.1/jsr311-api-1.1.1.jar:/Users/awesome/.m2/repository/com/netflix/servo/servo-core/0.12.21/servo-core-0.12.21.jar:/Users/awesome/.m2/repository/com/sun/jersey/jersey-core/1.19.1/jersey-core-1.19.1.jar:/Users/awesome/.m2/repository/com/sun/jersey/jersey-client/1.19.1/jersey-client-1.19.1.jar:/Users/awesome/.m2/repository/com/sun/jersey/contribs/jersey-apache-client4/1.19.1/jersey-apache-client4-1.19.1.jar:/Users/awesome/.m2/repository/org/apache/httpcomponents/httpclient/4.5.5/httpclient-4.5.5.jar:/Users/awesome/.m2/repository/org/apache/httpcomponents/httpcore/4.4.9/httpcore-4.4.9.jar:/Users/awesome/.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar:/Users/awesome/.m2/repository/com/google/inject/guice/4.1.0/guice-4.1.0.jar:/Users/awesome/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/Users/awesome/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/awesome/.m2/repository/com/github/vlsi/compactmap/compactmap/1.2.1/compactmap-1.2.1.jar:/Users/awesome/.m2/repository/com/github/andrewoma/dexx/dexx-collections/0.2/dexx-collections-0.2.jar:/Users/awesome/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/Users/awesome/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.5/jackson-core-2.9.5.jar:/Users/awesome/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.5/jackson-databind-2.9.5.jar:/Users/awesome/.m2/repository/com/netflix/eureka/eureka-core/1.9.2/eureka-core-1.9.2.jar:/Users/awesome/.m2/repository/org/codehaus/woodstox/woodstox-core-asl/4.4.1/woodstox-core-asl-4.4.1.jar:/Users/awesome/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar:/Users/awesome/.m2/repository/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-starter-netflix-archaius/2.0.0.RELEASE/spring-cloud-starter-netflix-archaius-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-netflix-ribbon/2.0.0.RELEASE/spring-cloud-netflix-ribbon-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-netflix-archaius/2.0.0.RELEASE/spring-cloud-netflix-archaius-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/commons-configuration/commons-configuration/1.8/commons-configuration-1.8.jar:/Users/awesome/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/awesome/.m2/repository/org/springframework/cloud/spring-cloud-starter-netflix-ribbon/2.0.0.RELEASE/spring-cloud-starter-netflix-ribbon-2.0.0.RELEASE.jar:/Users/awesome/.m2/repository/com/netflix/ribbon/ribbon/2.2.5/ribbon-2.2.5.jar:/Users/awesome/.m2/repository/com/netflix/ribbon/ribbon-transport/2.2.5/ribbon-transport-2.2.5.jar:/Users/awesome/.m2/repository/io/reactivex/rxnetty-contexts/0.4.9/rxnetty-contexts-0.4.9.jar:/Users/awesome/.m2/repository/io/reactivex/rxnetty-servo/0.4.9/rxnetty-servo-0.4.9.jar:/Users/awesome/.m2/repository/com/netflix/hystrix/hystrix-core/1.5.12/hystrix-core-1.5.12.jar:/Users/awesome/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.9/HdrHistogram-2.1.9.jar:/Users/awesome/.m2/repository/io/reactivex/rxnetty/0.4.9/rxnetty-0.4.9.jar:/Users/awesome/.m2/repository/io/netty/netty-codec-http/4.1.23.Final/netty-codec-http-4.1.23.Final.jar:/Users/awesome/.m2/repository/io/netty/netty-codec/4.1.23.Final/netty-codec-4.1.23.Final.jar:/Users/awesome/.m2/repository/io/netty/netty-transport-native-epoll/4.1.23.Final/netty-transport-native-epoll-4.1.23.Final.jar:/Users/awesome/.m2/repository/io/netty/netty-common/4.1.23.Final/netty-common-4.1.23.Final.jar:/Users/awesome/.m2/repository/io/netty/netty-buffer/4.1.23.Final/netty-buffer-4.1.23.Final.jar:/Users/awesome/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.23.Final/netty-transport-native-unix-common-4.1.23.Final.jar:/Users/awesome/.m2/repository/io/netty/netty-transport/4.1.23.Final/netty-transport-4.1.23.Final.jar:/Users/awesome/.m2/repository/io/netty/netty-resolver/4.1.23.Final/netty-resolver-4.1.23.Final.jar:/Users/awesome/.m2/repository/com/netflix/ribbon/ribbon-core/2.2.5/ribbon-core-2.2.5.jar:/Users/awesome/.m2/repository/com/netflix/ribbon/ribbon-httpclient/2.2.5/ribbon-httpclient-2.2.5.jar:/Users/awesome/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/awesome/.m2/repository/com/netflix/netflix-commons/netflix-commons-util/0.3.0/netflix-commons-util-0.3.0.jar:/Users/awesome/.m2/repository/com/netflix/ribbon/ribbon-loadbalancer/2.2.5/ribbon-loadbalancer-2.2.5.jar:/Users/awesome/.m2/repository/com/netflix/netflix-commons/netflix-statistics/0.1.1/netflix-statistics-0.1.1.jar:/Users/awesome/.m2/repository/io/reactivex/rxjava/1.3.8/rxjava-1.3.8.jar:/Users/awesome/.m2/repository/com/netflix/ribbon/ribbon-eureka/2.2.5/ribbon-eureka-2.2.5.jar:/Users/awesome/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/awesome/.m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar:/Users/awesome/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar:/Users/awesome/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot-starter-web/2.0.1.RELEASE/spring-boot-starter-web-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot-starter/2.0.1.RELEASE/spring-boot-starter-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot/2.0.1.RELEASE/spring-boot-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot-starter-logging/2.0.1.RELEASE/spring-boot-starter-logging-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/Users/awesome/.m2/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/Users/awesome/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.10.0/log4j-to-slf4j-2.10.0.jar:/Users/awesome/.m2/repository/org/apache/logging/log4j/log4j-api/2.10.0/log4j-api-2.10.0.jar:/Users/awesome/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/awesome/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/Users/awesome/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/spring-jcl/5.0.5.RELEASE/spring-jcl-5.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot-starter-json/2.0.1.RELEASE/spring-boot-starter-json-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.5/jackson-datatype-jdk8-2.9.5.jar:/Users/awesome/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.9.5/jackson-datatype-jsr310-2.9.5.jar:/Users/awesome/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.5/jackson-module-parameter-names-2.9.5.jar:/Users/awesome/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/2.0.1.RELEASE/spring-boot-starter-tomcat-2.0.1.RELEASE.jar:/Users/awesome/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.29/tomcat-embed-core-8.5.29.jar:/Users/awesome/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.5.29/tomcat-embed-el-8.5.29.jar:/Users/awesome/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.29/tomcat-embed-websocket-8.5.29.jar:/Users/awesome/.m2/repository/org/hibernate/validator/hibernate-validator/6.0.9.Final/hibernate-validator-6.0.9.Final.jar:/Users/awesome/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/Users/awesome/.m2/repository/org/jboss/logging/jboss-logging/3.3.2.Final/jboss-logging-3.3.2.Final.jar:/Users/awesome/.m2/repository/com/fasterxml/classmate/1.3.4/classmate-1.3.4.jar:/Users/awesome/.m2/repository/org/springframework/spring-web/5.0.5.RELEASE/spring-web-5.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/spring-beans/5.0.5.RELEASE/spring-beans-5.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/spring-webmvc/5.0.5.RELEASE/spring-webmvc-5.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/spring-aop/5.0.5.RELEASE/spring-aop-5.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/spring-context/5.0.5.RELEASE/spring-context-5.0.5.RELEASE.jar:/Users/awesome/.m2/repository/org/springframework/spring-expression/5.0.5.RELEASE/spring-expression-5.0.5.RELEASE.jar com.awesome.arithmetic.RoundArithmetic0120120Process finished with exit code 0]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ribbon 源码解析（一）Ribbon初始化&Ribbon -Eurka 整合]]></title>
    <url>%2F2019%2F09%2F06%2Fribbon-source%2F</url>
    <content type="text"><![CDATA[Ribbon 是springcloud 负载均衡的组件，其工作原理就是 通过Eureka注册中心的ApplicationName进行请求转发（负载均衡）。客户端通过appname进行请求，ribbon内部通过RestTempelate 此appname 从eureka注册中心fetch 服务实例注册信息（服务名称，所在的机器ip 端口 是否存活等～），然后进行HTTP调用1 ，@LoadBalanced是入口，触发LoadBalancerAutoConfiguration。而LoadBalancedAutoConfiguration 会创建请求拦截器，loadbalancerInterceptor (会拦截所有 RestTemplate请求 )然后loadbalancerInterceptor#interceptor 调用 IloadBalancer.execute( RibbonLoadBalancerClient#execute) 触发ribbon机制入口12345@LoadBalanced@Bean public RestTemplate getRestTemplate()&#123; return new RestTemplate(); &#125; 2，初始化loadbalancerClientorg.springframework.cloud.netflix.ribbon.RibbonClientConfiguration#ribbonLoadBalancer ZoneAwareLoadBalancer 是 IloadBalancer接口的实现类， ZoneAwareLoadBalancer（surperDynamicServerListLoadBalancer） 实现功能1，和eureka-client 获取增量服务注册列表，全量注册服务注册信息2，定时更新eureka注册服务实例上代码12345678910111213141516171819202122com.netflix.loadbalancer.DynamicServerListLoadBalancer#restOfInit// 构造ZoneAwareLoadBalancer 初始化方法void restOfInit(IClientConfig clientConfig) &#123; boolean primeConnection = this.isEnablePrimingConnections(); // turn this off to avoid duplicated asynchronous priming done in BaseLoadBalancer.setServerList() this.setEnablePrimingConnections(false); //顾名思义。开启初始化学习新服务能力 enableAndInitLearnNewServersFeature(); // 更新服务 updateListOfServers(); if (primeConnection &amp;&amp; this.getPrimeConnections() != null) &#123; this.getPrimeConnections() .primeConnections(getReachableServers()); &#125; this.setEnablePrimingConnections(primeConnection); LOGGER.info("DynamicServerListLoadBalancer for client &#123;&#125; initialized: &#123;&#125;", clientConfig.getClientName(), this.toString()); &#125; enableAndInitLearnNewServersFeature 定时更新服务注册列表通过 ScheduledThreadPoolExecutor 进行任务调度，synchronized 保证线程安全。默认第一次是1秒，之后默认30秒@Override public synchronized void start(final UpdateAction updateAction) { if (isActive.compareAndSet(false, true)) { final Runnable wrapperRunnable = new Runnable() { @Override public void run() { if (!isActive.get()) { if (scheduledFuture != null) { scheduledFuture.cancel(true); } return; } try { //拉取所有服务注册信息 updateAction.doUpdate(); lastUpdated = System.currentTimeMillis(); } catch (Exception e) { logger.warn("Failed one update cycle", e); } } }; //任务调度 scheduledFuture = getRefreshExecutor().scheduleWithFixedDelay( wrapperRunnable, initialDelayMs, refreshIntervalMs, TimeUnit.MILLISECONDS ); } else { logger.info("Already active, no-op"); } } updateListOfServers 方法是直接通过 eureka discoverClient 通过serviceId,从eureka-server拉去对应的所有服务注册信息ribbon 和eureka 整合 org.springframework.context.annotation.Configuration回头看 在构造ZoneAwareLoadBalancer 的时候传入了ServerList serverList 这个入参 public ZoneAwareLoadBalancer(IClientConfig clientConfig, IRule rule, IPing ping, ServerList&lt;T&gt; serverList, ServerListFilter&lt;T&gt; filter, ServerListUpdater serverListUpdater) { super(clientConfig, rule, ping, serverList, filter, serverListUpdater); } EurekaClient 是 eureka 的核心组件 org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration#ribbonServerList @Bean @ConditionalOnMissingBean public ServerList&lt;?&gt; ribbonServerList(IClientConfig config, Provider&lt;EurekaClient&gt; eurekaClientProvider) { if (this.propertiesFactory.isSet(ServerList.class, serviceId)) { return this.propertiesFactory.get(ServerList.class, config, serviceId); } DiscoveryEnabledNIWSServerList discoveryServerList = new DiscoveryEnabledNIWSServerList( config, eurekaClientProvider); DomainExtractingServerList serverList = new DomainExtractingServerList( discoveryServerList, config, this.approximateZoneFromHostname); return serverList; }]]></content>
  </entry>
</search>
